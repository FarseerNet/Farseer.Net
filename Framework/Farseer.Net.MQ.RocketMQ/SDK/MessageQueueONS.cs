//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace FS.MQ.RocketMQ.SDK
{
    public class MessageQueueONS : IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal MessageQueueONS(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(MessageQueueONS obj) { return obj == null ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr; }

        ~MessageQueueONS() { Dispose(); }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        ONSClient4CPPPINVOKE.delete_MessageQueueONS(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public MessageQueueONS() : this(ONSClient4CPPPINVOKE.new_MessageQueueONS__SWIG_0(), true) { }

        public MessageQueueONS(string topic, string brokerName, int queueId) : this(ONSClient4CPPPINVOKE.new_MessageQueueONS__SWIG_1(topic, brokerName, queueId), true)
        {
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public MessageQueueONS(MessageQueueONS other) : this(ONSClient4CPPPINVOKE.new_MessageQueueONS__SWIG_2(getCPtr(other)), true)
        {
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public string getTopic()
        {
            var ret = ONSClient4CPPPINVOKE.MessageQueueONS_getTopic(swigCPtr);
            return ret;
        }

        public void setTopic(string topic)
        {
            ONSClient4CPPPINVOKE.MessageQueueONS_setTopic(swigCPtr, topic);
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public string getBrokerName()
        {
            var ret = ONSClient4CPPPINVOKE.MessageQueueONS_getBrokerName(swigCPtr);
            return ret;
        }

        public void setBrokerName(string brokerName)
        {
            ONSClient4CPPPINVOKE.MessageQueueONS_setBrokerName(swigCPtr, brokerName);
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public int getQueueId()
        {
            var ret = ONSClient4CPPPINVOKE.MessageQueueONS_getQueueId(swigCPtr);
            return ret;
        }

        public void setQueueId(int queueId) { ONSClient4CPPPINVOKE.MessageQueueONS_setQueueId(swigCPtr, queueId); }

        public int compareTo(MessageQueueONS mq)
        {
            var ret = ONSClient4CPPPINVOKE.MessageQueueONS_compareTo(swigCPtr, getCPtr(mq));
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}