//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace FS.MQ.RocketMQ.SDK
{
    public class Message : IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal Message(IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new HandleRef(this, cPtr);
        }

        internal static HandleRef getCPtr(Message obj) { return obj == null ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr; }

        ~Message() { Dispose(); }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        ONSClient4CPPPINVOKE.delete_Message(swigCPtr);
                    }
                    swigCPtr = new HandleRef(null, IntPtr.Zero);
                }
                GC.SuppressFinalize(this);
            }
        }

        public Message() : this(ONSClient4CPPPINVOKE.new_Message__SWIG_0(), true) { }

        public Message(string topic, string tags, string body) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_1(topic, tags, body), true)
        {
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public Message(string topic, uint topic_size, string tags, uint tags_size, string body, uint body_size) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_3(topic, topic_size, tags, tags_size, body, body_size), true) { }

        public Message(string topic, string tags, string keys, string body) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_4(topic, tags, keys, body), true) { }

        public Message(Message other) : this(ONSClient4CPPPINVOKE.new_Message__SWIG_5(getCPtr(other)), true)
        {
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public void putUserProperties(string key, string value) { ONSClient4CPPPINVOKE.Message_putUserProperties(swigCPtr, key, value); }

        public string getUserProperties(string key)
        {
            var ret = ONSClient4CPPPINVOKE.Message_getUserProperties__SWIG_0(swigCPtr, key);
            return ret;
        }

        public void setUserProperties(SWIGTYPE_p_std__mapT_std__string_std__string_t userProperty)
        {
            ONSClient4CPPPINVOKE.Message_setUserProperties(swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.getCPtr(userProperty));
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_std__mapT_std__string_std__string_t getUserProperties()
        {
            var ret = new SWIGTYPE_p_std__mapT_std__string_std__string_t(ONSClient4CPPPINVOKE.Message_getUserProperties__SWIG_1(swigCPtr), true);
            return ret;
        }

        public void putSystemProperties(string key, string value) { ONSClient4CPPPINVOKE.Message_putSystemProperties(swigCPtr, key, value); }

        public string getSystemProperties(string key)
        {
            var ret = ONSClient4CPPPINVOKE.Message_getSystemProperties__SWIG_0(swigCPtr, key);
            return ret;
        }

        public void setSystemProperties(SWIGTYPE_p_std__mapT_std__string_std__string_t systemProperty)
        {
            ONSClient4CPPPINVOKE.Message_setSystemProperties(swigCPtr, SWIGTYPE_p_std__mapT_std__string_std__string_t.getCPtr(systemProperty));
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_std__mapT_std__string_std__string_t getSystemProperties()
        {
            var ret = new SWIGTYPE_p_std__mapT_std__string_std__string_t(ONSClient4CPPPINVOKE.Message_getSystemProperties__SWIG_1(swigCPtr), true);
            return ret;
        }

        public string getTopic()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getTopic(swigCPtr);
            return ret;
        }

        public void setTopic(string topic) { ONSClient4CPPPINVOKE.Message_setTopic(swigCPtr, topic); }

        public string getTag()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getTag(swigCPtr);
            return ret;
        }

        public void setTag(string tags) { ONSClient4CPPPINVOKE.Message_setTag(swigCPtr, tags); }

        public string getKey()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getKey(swigCPtr);
            return ret;
        }

        public void setKey(string keys) { ONSClient4CPPPINVOKE.Message_setKey(swigCPtr, keys); }

        public string getMsgID()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getMsgID(swigCPtr);
            return ret;
        }

        public void setMsgID(string msgId) { ONSClient4CPPPINVOKE.Message_setMsgID(swigCPtr, msgId); }

        public long getStartDeliverTime()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getStartDeliverTime(swigCPtr);
            return ret;
        }

        public void setStartDeliverTime(long level) { ONSClient4CPPPINVOKE.Message_setStartDeliverTime(swigCPtr, level); }

        public string getBody()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getBody(swigCPtr);
            return ret;
        }

        public string getMsgBody()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getMsgBody(swigCPtr);
            return ret;
        }

        public void setMsgBody(string msgbody)
        {
            ONSClient4CPPPINVOKE.Message_setMsgBody(swigCPtr, msgbody);
            if (ONSClient4CPPPINVOKE.SWIGPendingException.Pending) throw ONSClient4CPPPINVOKE.SWIGPendingException.Retrieve();
        }

        public void setBody(string msgbody, int len) { ONSClient4CPPPINVOKE.Message_setBody(swigCPtr, msgbody, len); }

        public int getReconsumeTimes()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getReconsumeTimes(swigCPtr);
            return ret;
        }

        public void setReconsumeTimes(int reconsumeTimes) { ONSClient4CPPPINVOKE.Message_setReconsumeTimes(swigCPtr, reconsumeTimes); }

        public long getStoreTimestamp()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getStoreTimestamp(swigCPtr);
            return ret;
        }

        public void setStoreTimestamp(long storeTimestamp) { ONSClient4CPPPINVOKE.Message_setStoreTimestamp(swigCPtr, storeTimestamp); }

        public string toString()
        {
            var ret = ONSClient4CPPPINVOKE.Message_toString(swigCPtr);
            return ret;
        }

        public string toSystemString()
        {
            var ret = ONSClient4CPPPINVOKE.Message_toSystemString(swigCPtr);
            return ret;
        }

        public string toUserString()
        {
            var ret = ONSClient4CPPPINVOKE.Message_toUserString(swigCPtr);
            return ret;
        }

        public long getQueueOffset()
        {
            var ret = ONSClient4CPPPINVOKE.Message_getQueueOffset(swigCPtr);
            return ret;
        }

        public void setQueueOffset(long queueOffset) { ONSClient4CPPPINVOKE.Message_setQueueOffset(swigCPtr, queueOffset); }
    }
}